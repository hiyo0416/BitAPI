<!DOCTYPE html>
<html>
<head>
  <title>API Data</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .container {
      display: flex;
        margin-bottom: 120px;
    }
    .table-container {
      width: 50%;
        margin-right: 0px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    .right-table {
        margin-left: 320px;
    }
    table td, table th {
      padding: 8px;
      border: 1px solid black;
    }

    .chart-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
    }

    #priceChart {
      height: 400px;
    }

    h1, h2 {
      margin-bottom: 10px;
    }

    label {
      display: block;
      margin-bottom: 5px;
    }

    input[type="text"] {
      padding: 5px;
      width: 200px;
      margin-bottom: 10px;
    }

    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button[type="submit"] {
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>API Data</h1>

  <% if (formattedValues.length > 0 && marketDataK.length > 0) { %>
    <div class="container">
        <div class="table-container">
            <h2>Account Data</h2>
            <table class="left-table">
                <thead>
                    <tr>
                        <th>화폐명</th>
                        <th>보유수량</th>
                        <th>락업수량</th>
                        <th>평균매수가격</th>
                        <th>매수평균가 수정 여부</th>
                        <th>구매화폐단위</th>
                    </tr>
                </thead>
                <tbody>
                    <% formattedValues.forEach(row => { %>
                        <tr>
                            <% row.forEach(value => { %>
                                <td><%= value %></td>
                            <% }); %>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
      </div>
    <div class="table-container">
      <h2></h2>
      <table class="right-table">
          <thead>
              <tr>
                  <th>마켓 이름</th>
                  <th>마켓 영문 이름</th>
                  <th>최신 가격</th>
                  <th>당일 고가</th>
                  <th>당일 저가</th>
                  <th>종가</th>
              </tr>
          </thead>
          <tbody>
              <% marketDataK.forEach((market, index) => { %>
                  <tr>
                      <td><%= market.market %></td>
                      <td><%= marketEnglishName[index] %></td>
                      <td><%= tickerData[index].opening_price || '' %></td>
                      <td><%= tickerData[index].high_price || '' %></td>
                      <td><%= tickerData[index].low_price || '' %></td>
                      <td><%= tickerData[index].prev_closing_price || '' %></td>
                  </tr>
              <% }); %>
          </tbody>
      </table>
      </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <div class="container">
      <div id="priceChartContainer">
        <h2>Price Chart</h2>
        <canvas id="priceChart"></canvas>
      </div>
    </div>
    <script>
      // Remaining JavaScript code for the chart goes here

      // 서버로부터 실시간 가격 데이터를 받아오는 함수
      function getPriceData() {
        const socket = new WebSocket('ws://localhost:8080');
        socket.addEventListener('open', () => {
          socket.send('getPriceData');
        });
        socket.addEventListener('message', event => {
          const priceData = JSON.parse(event.data);
          if (priceData.error) {
            console.error('Error fetching price data:', priceData.error);
          } else {
            updateChart(priceData);
          }
        });
      }

      // 차트 업데이트 함수
      function updateChart(data) {
        const ctx = document.getElementById('priceChart').getContext('2d');

        // 데이터 업데이트
        const updatedData = data.map((entry, index) => {
          // 이전 가격과 비교하여 색상 지정
          const previousPrice = index > 0 ? data[index - 1].price : entry.price;
          entry.color = entry.price > previousPrice ? 'red' : 'blue';
          return entry;
        });

        const chart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: updatedData.map(entry => entry.timestamp),
            datasets: [{
              label: 'Bitcoin Price',
              data: updatedData.map(entry => entry.price),
              borderColor: updatedData.map(entry => entry.color), // 선의 색상을 데이터에 저장된 색상으로 설정
              borderWidth: 3, // 선의 굵기 설정
              fill: true // 선만 표시하고 영역은 채우지 않도록 설정
            }]
          },
          options: {
            responsive: true,
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Price'
                }
              }
            }
          }
        });

        // 차트 객체 반환
        return chart;
      }

      // 초기 차트 그리기
      const initialChartData = JSON.parse('<%- JSON.stringify(chartData) %>');
      const initialChart = updateChart(initialChartData);

      // 실시간 가격 데이터를 받아와서 차트 업데이트하기
      getPriceData();
    </script>

    <script>
      // 자산 값을 입력 필드에 자동으로 채우는 함수
      function populateAssetValue() {
        const btcAsset = '<%= formattedValues.find(row => row[0] === "BTC")?.[1] || "" %>';
        const volumeInput = document.getElementById('volume');
        volumeInput.value = btcAsset;
      }

      // BTC 자산의 수량을 보여주는 함수
      function showBTCAssetQuantity() {
        const btcAssetQuantity = '<%= formattedValues.find(row => row[0] === "BTC")?.[1] || "" %>';
        const btcAssetQuantityText = document.getElementById('btcAssetQuantity');
        btcAssetQuantityText.textContent = btcAssetQuantity;
      }

      // 자산 값을 채우는 함수 호출
      populateAssetValue();

      // BTC 자산의 수량을 보여주는 함수 호출
      showBTCAssetQuantity();
    </script>

<div class="container">
  <h1>Place Order</h1>
  <form action="/place-order" method="POST">
    <label for="price">구매 가격</label>
    <input type="text" id="price" name="price" required>
    <br>
    <button type="submit" onclick="refreshPage()">구매 하기</button>
  </form>

  <form action="/sell-order" method="POST" style="margin-left: 100px;">
    <label for="volume">판매 수량</label>
    <input type="text" id="volume" name="volume" required>
    <span id="btcAssetQuantity"></span> BTC
    <br>
    <button type="submit" onclick="refreshPage()">판매 하기</button>
  </form>
</div>


</script>
  <% } else { %>
    <p>No data available.</p>
  <% } %>
</body>
</html>
